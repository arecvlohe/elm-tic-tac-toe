var _user$project$Main$getValue = F2(
	function ($int, model) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(_elm_community$list_extra$List_Extra$getAt, $int, model.board));
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$handleBoardFull = function (_p0) {
	return !A2(
		_elm_lang$core$List$any,
		function (v) {
			return _elm_lang$core$Native_Utils.eq(v, '');
		},
		_p0);
};
var _user$project$Main$handleChangeTurn = function (turn) {
	var _p1 = turn;
	if (_p1 === 'X') {
		return 'O';
	} else {
		return 'X';
	}
};
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {player1: a, player2: b, turn: c, board: d, isBoardFull: e, hasSetPlayer: f};
	});
var _user$project$Main$initModel = A6(
	_user$project$Main$Model,
	'X',
	'O',
	'X',
	{
		ctor: '::',
		_0: '',
		_1: {
			ctor: '::',
			_0: '',
			_1: {
				ctor: '::',
				_0: '',
				_1: {
					ctor: '::',
					_0: '',
					_1: {
						ctor: '::',
						_0: '',
						_1: {
							ctor: '::',
							_0: '',
							_1: {
								ctor: '::',
								_0: '',
								_1: {
									ctor: '::',
									_0: '',
									_1: {
										ctor: '::',
										_0: '',
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	false,
	false);
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$Rand = function (a) {
	return {ctor: 'Rand', _0: a};
};
var _user$project$Main$randoInt = A2(
	_elm_lang$core$Random$generate,
	_user$project$Main$Rand,
	A2(_elm_lang$core$Random$int, 0, 8));
var _user$project$Main$SetPlayer = function (a) {
	return {ctor: 'SetPlayer', _0: a};
};
var _user$project$Main$Reset = {ctor: 'Reset'};
var _user$project$Main$Mark = function (a) {
	return {ctor: 'Mark', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p2 = msg;
			switch (_p2.ctor) {
				case 'Mark':
					var _p3 = _p2._0;
					var nextTurn = _elm_lang$core$Native_Utils.eq(
						A2(_user$project$Main$getValue, _p3, model),
						'') ? _user$project$Main$handleChangeTurn(model.turn) : model.turn;
					var nextBoard = _elm_lang$core$Native_Utils.eq(
						A2(_user$project$Main$getValue, _p3, model),
						'') ? A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A3(_elm_community$list_extra$List_Extra$setAt, _p3, model.turn, model.board)) : model.board;
					var isBoardFull = _user$project$Main$handleBoardFull(nextBoard);
					var nextCmd = (_elm_lang$core$Native_Utils.eq(model.player1, model.turn) && (!isBoardFull)) ? _user$project$Main$randoInt : _elm_lang$core$Platform_Cmd$none;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{board: nextBoard, turn: nextTurn, isBoardFull: isBoardFull}),
						{
							ctor: '::',
							_0: nextCmd,
							_1: {ctor: '[]'}
						});
				case 'Reset':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_user$project$Main$initModel,
						{ctor: '[]'});
				case 'Rand':
					var _p4 = _p2._0;
					var hasValue = !_elm_lang$core$Native_Utils.eq(
						A2(_user$project$Main$getValue, _p4, model),
						'');
					if (hasValue) {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{
								ctor: '::',
								_0: _user$project$Main$randoInt,
								_1: {ctor: '[]'}
							});
					} else {
						var _v2 = _user$project$Main$Mark(_p4),
							_v3 = model;
						msg = _v2;
						model = _v3;
						continue update;
					}
				default:
					var _p5 = _p2._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								player1: _p5,
								player2: _user$project$Main$handleChangeTurn(_p5),
								turn: _p5,
								hasSetPlayer: true
							}),
						{ctor: '[]'});
			}
		}
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Styles$container,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: (!model.hasSetPlayer) ? A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Styles$containerChooseButtons,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$String$toUpper('Choose Player')),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Styles$chooseButtons,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Main$SetPlayer('X')),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Player X'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														_user$project$Main$SetPlayer('O')),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Player O'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}) : A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Styles$containerChooseButtons,
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Styles$innerContainer,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$Styles$box,
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Main$Mark(0)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_user$project$Main$getValue, 0, model)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles$box,
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$Mark(1)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$Main$getValue, 1, model)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Styles$box,
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Main$Mark(2)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$Main$getValue, 2, model)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Styles$innerContainer,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles$box,
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$Mark(3)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$Main$getValue, 3, model)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Styles$box,
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Main$Mark(4)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$Main$getValue, 4, model)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Styles$box,
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Main$Mark(5)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$Main$getValue, 5, model)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$Styles$innerContainer,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Styles$box,
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Main$Mark(6)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$Main$getValue, 6, model)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Styles$box,
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Main$Mark(7)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$Main$getValue, 7, model)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _user$project$Styles$box,
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														_user$project$Main$Mark(8)),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$Main$getValue, 8, model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles$buttons,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: model.isBoardFull ? A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Reset),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Reset'),
											_1: {ctor: '[]'}
										}) : _elm_lang$html$Html$text(''),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view})();
